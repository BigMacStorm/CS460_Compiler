[p]: type_specifier -> SIGNEDtok
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: unary_operator -> UNARY_MINUStok
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: unary_expression -> unary_operator cast_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: assignment_expression -> conditional_expression
[p]: initializer -> assignment_expression
[p]: init_declarator -> declarator EQUALtok initializer
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> external_declaration
signed int si = - 10 ; 
[p]: type_qualifier -> CONSTtok
[p]: type_specifier -> DOUBLEtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: constant -> FLOATING_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: assignment_expression -> conditional_expression
[p]: initializer -> assignment_expression
[p]: init_declarator -> declarator EQUALtok initializer
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
const double cd = 1.4 ; 
[p]: type_qualifier -> VOLATILEtok
[p]: type_specifier -> DOUBLEtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: constant -> FLOATING_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: assignment_expression -> conditional_expression
[p]: initializer -> assignment_expression
[p]: init_declarator -> declarator EQUALtok initializer
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
volatile double vd = 2.5 ; 
[p]: type_qualifier -> CONSTtok
[p]: type_qualifier -> VOLATILEtok
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: assignment_expression -> conditional_expression
[p]: initializer -> assignment_expression
[p]: init_declarator -> declarator EQUALtok initializer
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
const volatile int cvi = 0 ; 
[p]: storage_class_specifier -> STATICtok
[p]: type_qualifier -> CONSTtok
[p]: type_qualifier -> VOLATILEtok
[p]: type_specifier -> FLOATtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: declaration_specifiers -> storage_class_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: constant -> FLOATING_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: assignment_expression -> conditional_expression
[p]: initializer -> assignment_expression
[p]: init_declarator -> declarator EQUALtok initializer
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
static const volatile float scvf = 2.0 ; 
[p]: storage_class_specifier -> STATICtok
[p]: type_qualifier -> CONSTtok
[p]: type_qualifier -> VOLATILEtok
[p]: type_specifier -> SIGNEDtok
[p]: type_specifier -> LONGtok
[p]: type_specifier -> LONGtok
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: declaration_specifiers -> storage_class_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
static const volatile signed long long int scvsll ; 
[p]: type_specifier -> LONGtok
[p]: storage_class_specifier -> STATICtok
[p]: type_qualifier -> CONSTtok
[p]: type_specifier -> UNSIGNEDtok
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: declaration_specifiers -> type_qualifier declaration_specifiers
[p]: declaration_specifiers -> storage_class_specifier declaration_specifiers
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: direct_declarator -> direct_declarator OPEN_SQUAREtok CLOSE_SQUAREtok
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
long static const unsigned int lscui [ ] ; 
[p]: storage_class_specifier -> EXTERNtok
[p]: type_specifier -> DOUBLEtok
[p]: type_specifier -> LONGtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: declaration_specifiers -> storage_class_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: constant_expression -> conditional_expression
[p]: direct_declarator -> direct_declarator OPEN_SQUAREtok constant_expression CLOSE_SQUAREtok
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
extern double long edl [ 10 ] ; 
[p]: type_specifier -> FLOATtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: constant_expression -> conditional_expression
[p]: direct_declarator -> direct_declarator OPEN_SQUAREtok constant_expression CLOSE_SQUAREtok
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
float f2d [ 20 ] ; 
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: constant_expression -> conditional_expression
[p]: direct_declarator -> direct_declarator OPEN_SQUAREtok constant_expression CLOSE_SQUAREtok
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: constant_expression -> conditional_expression
[p]: direct_declarator -> direct_declarator OPEN_SQUAREtok constant_expression CLOSE_SQUAREtok
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: constant_expression -> conditional_expression
[p]: direct_declarator -> direct_declarator OPEN_SQUAREtok constant_expression CLOSE_SQUAREtok
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
int i3d [ 2 ] [ 2 ] [ 2 ] ; 
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: direct_declarator -> direct_declarator OPEN_PARENtok CLOSE_PARENtok
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
int foo ( ) ; 
[p]: type_specifier -> UNSIGNEDtok
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: type_specifier -> FLOATtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: parameter_declaration -> declaration_specifiers declarator
[p]: parameter_list -> parameter_declaration
[p]: type_specifier -> LONGtok
[p]: type_specifier -> DOUBLEtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: parameter_declaration -> declaration_specifiers declarator
[p]: parameter_list -> parameter_list COMMAtok parameter_declaration
[p]: parameter_type_list -> parameter_list
[p]: direct_declarator -> direct_declarator OPEN_PARENtok parameter_type_list CLOSE_PARENtok
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: external_declaration -> declaration
[p]: translation_unit -> translation_unit external_declaration
unsigned int boo ( float x , long double z ) ; 
[p]: type_specifier -> VOIDtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: parameter_declaration -> declaration_specifiers declarator
[p]: parameter_list -> parameter_declaration
[p]: storage_class_specifier -> REGISTERtok
[p]: type_specifier -> UNSIGNEDtok
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: declaration_specifiers -> type_specifier declaration_specifiers
[p]: declaration_specifiers -> storage_class_specifier declaration_specifiers
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: parameter_declaration -> declaration_specifiers declarator
[p]: parameter_list -> parameter_list COMMAtok parameter_declaration
[p]: parameter_type_list -> parameter_list
[p]: direct_declarator -> direct_declarator OPEN_PARENtok parameter_type_list CLOSE_PARENtok
[p]: declarator -> direct_declarator
void zoo ( int a , register unsigned int b ) { 
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator_list COMMAtok init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: declaration_list -> declaration
int x , y ; 

[p]: compound_statement -> OPEN_CURLYtok declaration_list CLOSE_CURLYtok
[p]: function_definition -> declaration_specifiers declarator compound_statement
[p]: external_declaration -> function_definition
[p]: translation_unit -> translation_unit external_declaration
} 
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: direct_declarator -> direct_declarator OPEN_PARENtok CLOSE_PARENtok
[p]: declarator -> direct_declarator
int main ( ) { 
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: pointer -> UNARY_ASTERISKtok
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> pointer direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: declaration_list -> declaration
int * ip ; 
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: pointer -> UNARY_ASTERISKtok
[p]: pointer -> UNARY_ASTERISKtok pointer
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> pointer direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: declaration_list -> declaration_list declaration
int * * ipp ; 
[p]: type_specifier -> INTtok
[p]: declaration_specifiers -> type_specifier
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: constant_expression -> conditional_expression
[p]: direct_declarator -> direct_declarator OPEN_SQUAREtok constant_expression CLOSE_SQUAREtok
[p]: declarator -> direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator_list COMMAtok init_declarator
[p]: pointer -> UNARY_ASTERISKtok
[p]: identifier -> IDENTIFIERtok
[p]: direct_declarator -> identifier
[p]: declarator -> pointer direct_declarator
[p]: init_declarator -> declarator
[p]: init_declarator_list -> init_declarator_list COMMAtok init_declarator
[p]: declaration -> declaration_specifiers init_declarator_list SEMItok
[p]: declaration_list -> declaration_list declaration
int i1 , i2 [ 10 ] , * i3 ; 

[p]: constant -> INTEGER_CONSTANTtok
[p]: primary_expression -> constant
[p]: postfix_expression -> primary_expression
[p]: unary_expression -> postfix_expression
[p]: cast_expression -> unary_expression
[p]: multiplicative_expression -> cast_expression
[p]: additive_expression -> multiplicative_expression
[p]: shift_expression -> additive_expression
[p]: relational_expression -> shift_expression
[p]: equality_expression -> relational_expression
[p]: and_expression -> equality_expression
[p]: exclusive_or_expression -> and_expression
[p]: inclusive_or_expression -> exclusive_or_expression
[p]: logical_and_expression -> inclusive_or_expression
[p]: logical_or_expression -> logical_and_expression
[p]: conditional_expression -> logical_or_expression
[p]: assignment_expression -> conditional_expression
[p]: expression -> assignment_expression
[p]: jump_statement -> RETURNtok expression SEMItok
[p]: statement -> jump_statement
[p]: statement_list -> statement
return 0 ; 
[p]: compound_statement -> OPEN_CURLYtok declaration_list statement_list CLOSE_CURLYtok
[p]: function_definition -> declaration_specifiers declarator compound_statement
[p]: external_declaration -> function_definition
[p]: translation_unit -> translation_unit external_declaration
